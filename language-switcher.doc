# Language Switching Implementation Guide

This document explains how the language switching functionality works in the Escobar Insurance website.

## How It Works

The website uses JavaScript to dynamically change the content between Spanish and English based on user selection. This is implemented through HTML data attributes and JavaScript that toggles between these attributes.

### HTML Structure

Each text element that needs to be translated has both Spanish and English versions stored in data attributes:

```html
<p data-en="This is the English text" data-es="Este es el texto en español">
    Este es el texto en español
</p>
```

- `data-en`: Contains the English version of the text
- `data-es`: Contains the Spanish version of the text
- The default content inside the tags is the Spanish version (since Spanish is the default language)

### Language Selector

The language selector is in the navigation menu:

```html
<li class="nav-item dropdown language-selector">
    <a class="nav-link dropdown-toggle" href="#" id="languageDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="fas fa-globe"></i> ES
    </a>
    <ul class="dropdown-menu" aria-labelledby="languageDropdown">
        <li><a class="dropdown-item" href="#" data-lang="es">Español</a></li>
        <li><a class="dropdown-item" href="#" data-lang="en">English</a></li>
    </ul>
</li>
```

### JavaScript Implementation

The JavaScript (in `script.js`) handles:

1. Detecting user's language preference
2. Storing language preference in localStorage
3. Switching text content based on the selected language

```javascript
// Language Switcher Functionality
const languageToggle = document.querySelectorAll('.dropdown-item[data-lang]');
let currentLang = 'es'; // Default language is Spanish

// Check if language preference is stored in local storage
if (localStorage.getItem('escobar_lang')) {
    currentLang = localStorage.getItem('escobar_lang');
    switchLanguage(currentLang);
}

// Add event listeners to language toggles
languageToggle.forEach(toggle => {
    toggle.addEventListener('click', function(e) {
        e.preventDefault();
        const lang = this.getAttribute('data-lang');
        
        // Update language in local storage
        localStorage.setItem('escobar_lang', lang);
        
        // Switch language on the page
        switchLanguage(lang);
    });
});

// Function to switch language
function switchLanguage(lang) {
    currentLang = lang;
    
    // Update the language selector text
    document.querySelector('#languageDropdown').innerHTML = `<i class="fas fa-globe"></i> ${lang.toUpperCase()}`;
    
    // Get all elements with data-en and data-es attributes
    const elements = document.querySelectorAll('[data-en], [data-es]');
    
    // Update each element's text content based on the language
    elements.forEach(el => {
        if (el.hasAttribute(`data-${lang}`)) {
            const text = el.getAttribute(`data-${lang}`);
            
            // Check if element is an input/textarea
            if (el.tagName === 'INPUT' || el.tagName === 'TEXTAREA') {
                // For placeholder, title, etc.
                if (el.hasAttribute('placeholder')) {
                    el.setAttribute('placeholder', text);
                } else {
                    el.value = text;
                }
            } else {
                el.textContent = text;
            }
        }
    });
    
    // Update the html lang attribute
    document.documentElement.setAttribute('lang', lang);
}
```

## Guidelines for Adding New Content

When adding new text content to the website:

1. Always include both `data-en` and `data-es` attributes on elements with text that should be translated
2. Make sure the default text (inside the HTML tags) is in Spanish
3. Ensure that both language versions are provided and accurate

### Example:

```html
<!-- Correct way to add translatable content -->
<h2 data-en="About Us" data-es="Sobre Nosotros">Sobre Nosotros</h2>

<!-- Buttons should also have data attributes -->
<button data-en="Send Message" data-es="Enviar Mensaje">Enviar Mensaje</button>

<!-- For form placeholders -->
<input type="text" placeholder="Nombre completo" 
       data-en="Full name" data-es="Nombre completo">
```

## Translation Best Practices

1. Keep translations concise and natural in both languages
2. Consider cultural nuances when translating, not just word-for-word translation
3. For forms and interactive elements, ensure that error messages and validation text are also translated
4. Check that translated text fits well in the UI layout for both languages

## Adding New Pages

When creating new pages:

1. Copy the header and footer structure from an existing page
2. Make sure the navigation language switcher is included
3. Include the JavaScript file that contains the language switching functionality
4. Add appropriate `data-en` and `data-es` attributes to all text content
